// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import (
	"reflect"

	context1 "golang.org/x/net/context"
	grpcqueue "github.com/TheJumpCloud/grpcqueue-go"
	ptypes "github.com/golang/protobuf/ptypes"
	anypb "github.com/golang/protobuf/ptypes/any"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestRPCRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRPCRequest) Reset()         { *m = TestRPCRequest{} }
func (m *TestRPCRequest) String() string { return proto.CompactTextString(m) }
func (*TestRPCRequest) ProtoMessage()    {}
func (*TestRPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_48832b4d36df72cb, []int{0}
}
func (m *TestRPCRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRPCRequest.Unmarshal(m, b)
}
func (m *TestRPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRPCRequest.Marshal(b, m, deterministic)
}
func (dst *TestRPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRPCRequest.Merge(dst, src)
}
func (m *TestRPCRequest) XXX_Size() int {
	return xxx_messageInfo_TestRPCRequest.Size(m)
}
func (m *TestRPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRPCRequest proto.InternalMessageInfo

func (m *TestRPCRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TestRPCResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRPCResponse) Reset()         { *m = TestRPCResponse{} }
func (m *TestRPCResponse) String() string { return proto.CompactTextString(m) }
func (*TestRPCResponse) ProtoMessage()    {}
func (*TestRPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_48832b4d36df72cb, []int{1}
}
func (m *TestRPCResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRPCResponse.Unmarshal(m, b)
}
func (m *TestRPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRPCResponse.Marshal(b, m, deterministic)
}
func (dst *TestRPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRPCResponse.Merge(dst, src)
}
func (m *TestRPCResponse) XXX_Size() int {
	return xxx_messageInfo_TestRPCResponse.Size(m)
}
func (m *TestRPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestRPCResponse proto.InternalMessageInfo

func (m *TestRPCResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*TestRPCRequest)(nil), "proto.TestRPCRequest")
	proto.RegisterType((*TestRPCResponse)(nil), "proto.TestRPCResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestClient interface {
	TestRPC(ctx context.Context, in *TestRPCRequest, opts ...grpc.CallOption) (*TestRPCResponse, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) TestRPC(ctx context.Context, in *TestRPCRequest, opts ...grpc.CallOption) (*TestRPCResponse, error) {
	out := new(TestRPCResponse)
	err := c.cc.Invoke(ctx, "/proto.Test/TestRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServer is the server API for Test service.
type TestServer interface {
	TestRPC(context.Context, *TestRPCRequest) (*TestRPCResponse, error)
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_TestRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).TestRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Test/TestRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).TestRPC(ctx, req.(*TestRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestRPC",
			Handler:    _Test_TestRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcqueue package it is being compiled against.
const _ = grpcqueue.SupportPackageIsVersion1

// Producer API for Test service

type TestProducer interface {
	EnqueueTestRPC(ctx context1.Context, in *TestRPCRequest, opts ...grpcqueue.EnqueueOption) error
	BatchEnqueueTestRPC(ctx context1.Context, in []*TestRPCRequest, opts ...grpcqueue.EnqueueOption) error
}

type testProducer struct {
	broker      grpcqueue.Broker
	queue       grpcqueue.Queue
	enqueueOpts []grpcqueue.EnqueueOption
}

func NewTestProducer(broker grpcqueue.Broker, queue grpcqueue.Queue, opts ...grpcqueue.EnqueueOption) TestProducer {
	return &testProducer{broker, queue, opts}
}

func (c *testProducer) EnqueueTestRPC(ctx context1.Context, in *TestRPCRequest, opts ...grpcqueue.EnqueueOption) error {
	opts = append(c.enqueueOpts, opts...)
	err := grpcqueue.Enqueue(ctx, "proto.Test", "TestRPC", in, c.broker, c.queue, opts...)
	if err != nil {
		return fmt.Errorf("failed to enqueue request: %s", err)
	}
	return nil
}

func (c *testProducer) BatchEnqueueTestRPC(ctx context1.Context, in []*TestRPCRequest, opts ...grpcqueue.EnqueueOption) error {
	opts = append(c.enqueueOpts, opts...)
	args := make([]interface{}, 0, len(in))
	for _, req := range in {
		args = append(args, req)
	}
	err := grpcqueue.EnqueueBatch(ctx, "proto.Test", "TestRPC", args, c.broker, c.queue, opts...)
	if err != nil {
		return fmt.Errorf("failed to enqueue requests: %s", err)
	}
	return nil
}

// Consumer API for Test service is same as server API for Test

func RegisterTestConsumer(c *grpcqueue.Consumer, srv TestServer) {
	c.RegisterService(&_Test_serviceDesc, srv)
}

// Consumer API for Test service results is related to server API for Test service,
// but with 'Result' appended to method names and it takes a Request, Response, and Error.

type TestResultsServer interface {
	TestRPCResult(context1.Context, *TestRPCRequest, *TestRPCResponse, error) error
}

func RegisterTestResultsConsumer(c *grpcqueue.Consumer, srv TestResultsServer) {
	c.RegisterResultsService(&_TestResults_resultsServiceDesc, srv)
}

func _TestResults_TestRPCResult_Handler(srv interface{}, ctx context1.Context, reqAny *anypb.Any, respAny *anypb.Any, respErr error) error {
	var req *TestRPCRequest
	if !reflect.ValueOf(reqAny).IsNil() {
		req = new(TestRPCRequest)
		if err := ptypes.UnmarshalAny(reqAny, req); err != nil {
			return err
		}
	}
	var resp *TestRPCResponse
	if !reflect.ValueOf(respAny).IsNil() {
		resp = new(TestRPCResponse)
		if err := ptypes.UnmarshalAny(respAny, resp); err != nil {
			return err
		}
	}
	return srv.(TestResultsServer).TestRPCResult(ctx, req, resp, respErr)
}

var _TestResults_resultsServiceDesc = grpcqueue.ResultsServiceDesc{
	ServiceName: "proto.TestResult",
	HandlerType: (*TestResultsServer)(nil),
	Methods: []grpcqueue.ResultMethodDesc{
		{
			MethodName: "TestRPCResult",
			Handler:    _TestResults_TestRPCResult_Handler,
		},
	},
}

// Results queue for Test service knows how to wrap the server API for Test
// and enqueue req, resp, and err onto that queue

func RegisterTestResultsQueue(c *grpcqueue.Consumer, broker grpcqueue.Broker, queue grpcqueue.Queue) {
	c.RegisterResultsQueue(&_Test_resultsQueueDesc, broker, queue)
}

func _TestResultsQueue_TestRPC_Handler(ctx context1.Context, req interface{}, resp interface{}, respErr error, broker grpcqueue.Broker, queue grpcqueue.Queue, opts ...grpcqueue.EnqueueOption) error {
	err := grpcqueue.EnqueueResult(ctx, "proto.TestResult", "TestRPCResult", req, resp, respErr, broker, queue, opts...)
	if err != nil {
		return err
	}
	return nil
}

var _Test_resultsQueueDesc = grpcqueue.ResultsQueueDesc{
	ServiceName: "proto.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpcqueue.ResultHandlerDesc{
		{
			MethodName: "TestRPC",
			Handler:    _TestResultsQueue_TestRPC_Handler,
		},
	},
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_test_48832b4d36df72cb) }

var fileDescriptor_test_48832b4d36df72cb = []byte{
	// 124 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x5a, 0x5c, 0x7c, 0x21, 0xa9,
	0xc5, 0x25, 0x41, 0x01, 0xce, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12, 0x5c, 0xec,
	0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae,
	0x92, 0x36, 0x17, 0x3f, 0x5c, 0x6d, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0x6e, 0xc5, 0x46, 0x4e,
	0x5c, 0x2c, 0x20, 0xc5, 0x42, 0x56, 0x5c, 0xec, 0x50, 0x4d, 0x42, 0xa2, 0x10, 0xab, 0xf5, 0x50,
	0x2d, 0x94, 0x12, 0x43, 0x17, 0x86, 0x98, 0xad, 0xc4, 0x90, 0xc4, 0x06, 0x96, 0x30, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x64, 0xff, 0x10, 0x85, 0xb8, 0x00, 0x00, 0x00,
}
